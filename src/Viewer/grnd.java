/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Viewer;

import Model.DB;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.xswingx.PromptSupport;

/**
 *
 * @author Ashan Lakshitha
 */
public class grnd extends javax.swing.JDialog {

    /**
     * Creates new form grn
     */
    DB d = new DB();
    DefaultTableModel dtm;
    DefaultTableModel dtm1;
    String user;
    String supplier;
    DefaultListModel jlm1 ;
    
    public grnd(java.awt.Frame parent, boolean modal , String u ) {
        super(parent, modal);
        initComponents();
        dtm = (DefaultTableModel) producttable.getModel();
        dtm1 = (DefaultTableModel) stocktable.getModel();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        invdate.setDateFormat(sdf);
        user = u;
        jlm1 = new DefaultListModel();
        rb1.setSelected(true);
        elbl.setVisible(false);
        pidtxt.setEditable(false);
        numberlist1.setVisible(false);
        numberlist2.setVisible(false);
        spnselect.setSelected(true);
        catagaryload();
        setFrontText();
        supplierload();
        selectbarcode();
        productload();
        stockload();
    }
    
        private void setFrontText() {
        //setPront(cidtxt , "Customer ID");
        //setPront(cnametxt, "Customer Name");
        setPront(pidtxt, "New Barcode");
        setPront(pnametxt, "New Product Name");
        setPront(cpidtxt, "Barcode No#");
        setPront(cpnametxt, "Product Name");
        setPront(cqtytxt, "Product Qty");
        setPront(cbuytxt, "Buy Price");
        setPront(minpricetxt, "Minimum Price");
        setPront(maxpricetxt, "Maximum Price");
        setPront(defpricetxt, "Default Price");
        setPront(lowstocktxt, "Low Stock Reminder");
    }

    private void setPront(JTextField a, String text) {
        PromptSupport.setPrompt(text, a);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.SHOW_PROMPT, a);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        suppliercombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        supplbl = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        invdate = new datechooser.beans.DateChooserCombo();
        jLabel11 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        pidtxt = new javax.swing.JTextField();
        pnametxt = new javax.swing.JTextField();
        catagarycombo = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        producttable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        elbl = new javax.swing.JLabel();
        rb1 = new javax.swing.JRadioButton();
        rb2 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        numberlist2 = new javax.swing.JScrollPane();
        numberlist1 = new javax.swing.JList();
        cpnametxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbuytxt = new javax.swing.JTextField();
        lowstocktxt = new javax.swing.JTextField();
        cqtytxt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        stocktable = new javax.swing.JTable();
        maxpricetxt = new javax.swing.JTextField();
        subtotaltxt = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cpidtxt = new javax.swing.JTextField();
        spnselect = new javax.swing.JCheckBox();
        minpricetxt = new javax.swing.JTextField();
        defpricetxt = new javax.swing.JTextField();
        freecheck = new javax.swing.JCheckBox();
        freecheck1 = new javax.swing.JCheckBox();
        cscheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 102));
        jLabel2.setText("Stock");

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 102));
        jLabel1.setText("create");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel3.setText("Supplier Information");

        suppliercombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        suppliercombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                suppliercomboItemStateChanged(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/desktop-pc-computer-128.png"))); // NOI18N

        supplbl.setText("0");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("+");
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/refresh-circle-blue-24.png"))); // NOI18N
        jLabel4.setToolTipText("Refresh Window");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel11.setText("Custom Date");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(66, 66, 66)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(invdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(supplbl))
                    .addComponent(suppliercombo, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel11))
                            .addComponent(supplbl)
                            .addComponent(jLabel4))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(suppliercombo)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(invdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel6.setText("Product Registration");

        pidtxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        pidtxt.setFocusable(false);
        pidtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pidtxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pidtxtKeyTyped(evt);
            }
        });

        pnametxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        pnametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pnametxtActionPerformed(evt);
            }
        });
        pnametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pnametxtKeyTyped(evt);
            }
        });

        catagarycombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        catagarycombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                catagarycomboMouseClicked(evt);
            }
        });
        catagarycombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                catagarycomboItemStateChanged(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButton1KeyReleased(evt);
            }
        });

        producttable.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        producttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Name"
            }
        ));
        producttable.setOpaque(false);
        producttable.setRowHeight(20);
        producttable.setSelectionBackground(new java.awt.Color(0, 153, 153));
        jScrollPane1.setViewportView(producttable);
        if (producttable.getColumnModel().getColumnCount() > 0) {
            producttable.getColumnModel().getColumn(0).setMinWidth(70);
            producttable.getColumnModel().getColumn(0).setPreferredWidth(70);
            producttable.getColumnModel().getColumn(0).setMaxWidth(70);
            producttable.getColumnModel().getColumn(1).setMinWidth(150);
            producttable.getColumnModel().getColumn(1).setPreferredWidth(150);
            producttable.getColumnModel().getColumn(1).setMaxWidth(150);
        }

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("+");
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        elbl.setForeground(new java.awt.Color(204, 0, 0));
        elbl.setText("* Exist");

        buttonGroup1.add(rb1);
        rb1.setText("Generate");
        rb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(rb2);
        rb2.setText("Exiting Barcode");
        rb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb2ActionPerformed(evt);
            }
        });

        jButton3.setText("Change Product Name");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(26, 102, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pnametxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pidtxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(catagarycombo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                                    .addComponent(elbl)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(1, 1, 1))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3))))
                        .addGap(27, 27, 27))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(rb1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rb2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb1)
                    .addComponent(rb2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(catagarycombo, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pidtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(elbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {catagarycombo, pidtxt, pnametxt});

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));
        jPanel4.setOpaque(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        numberlist1.setBackground(new java.awt.Color(0, 0, 0));
        numberlist1.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        numberlist1.setForeground(new java.awt.Color(255, 255, 255));
        numberlist1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        numberlist1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        numberlist1.setSelectionBackground(new java.awt.Color(0, 102, 102));
        numberlist1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                numberlist1MouseClicked(evt);
            }
        });
        numberlist1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numberlist1KeyReleased(evt);
            }
        });
        numberlist1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                numberlist1ValueChanged(evt);
            }
        });
        numberlist2.setViewportView(numberlist1);

        jPanel4.add(numberlist2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 230, 90));

        cpnametxt.setEditable(false);
        cpnametxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cpnametxt.setFocusable(false);
        cpnametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpnametxtActionPerformed(evt);
            }
        });
        cpnametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cpnametxtKeyTyped(evt);
            }
        });
        jPanel4.add(cpnametxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 43, 368, 37));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel7.setText("Create Stock");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        cbuytxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cbuytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbuytxtActionPerformed(evt);
            }
        });
        cbuytxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbuytxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cbuytxtKeyTyped(evt);
            }
        });
        jPanel4.add(cbuytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 91, 179, 37));

        lowstocktxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lowstocktxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowstocktxtActionPerformed(evt);
            }
        });
        lowstocktxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lowstocktxtKeyTyped(evt);
            }
        });
        jPanel4.add(lowstocktxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 140, 120, 37));

        cqtytxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cqtytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cqtytxtActionPerformed(evt);
            }
        });
        cqtytxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cqtytxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cqtytxtKeyTyped(evt);
            }
        });
        jPanel4.add(cqtytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 179, 37));

        jButton2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 190, 99, 36));

        stocktable.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        stocktable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No#", "Barcode", "Name", "Cost", "Min", "Max", "Qty", "Av.Qty"
            }
        ));
        stocktable.setOpaque(false);
        stocktable.setRowHeight(20);
        stocktable.setSelectionBackground(new java.awt.Color(0, 153, 153));
        jScrollPane2.setViewportView(stocktable);
        if (stocktable.getColumnModel().getColumnCount() > 0) {
            stocktable.getColumnModel().getColumn(0).setMinWidth(35);
            stocktable.getColumnModel().getColumn(0).setPreferredWidth(35);
            stocktable.getColumnModel().getColumn(0).setMaxWidth(35);
            stocktable.getColumnModel().getColumn(1).setMinWidth(70);
            stocktable.getColumnModel().getColumn(1).setPreferredWidth(70);
            stocktable.getColumnModel().getColumn(1).setMaxWidth(70);
            stocktable.getColumnModel().getColumn(2).setMinWidth(150);
            stocktable.getColumnModel().getColumn(2).setPreferredWidth(150);
            stocktable.getColumnModel().getColumn(2).setMaxWidth(150);
            stocktable.getColumnModel().getColumn(6).setMinWidth(50);
            stocktable.getColumnModel().getColumn(6).setPreferredWidth(50);
            stocktable.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 237, 557, 150));

        maxpricetxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        maxpricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxpricetxtActionPerformed(evt);
            }
        });
        maxpricetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxpricetxtKeyTyped(evt);
            }
        });
        jPanel4.add(maxpricetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 130, 37));

        subtotaltxt.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        subtotaltxt.setForeground(new java.awt.Color(153, 0, 0));
        subtotaltxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtotaltxt.setText("Rs. 0.00");
        jPanel4.add(subtotaltxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, 170, 36));

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/ui_04_of_9-15-20.png"))); // NOI18N
        jLabel9.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel5.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 0, 30, 30));

        cpidtxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cpidtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpidtxtActionPerformed(evt);
            }
        });
        cpidtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cpidtxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cpidtxtKeyTyped(evt);
            }
        });
        jPanel5.add(cpidtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 177, 37));

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 43, 179, -1));

        spnselect.setBackground(new java.awt.Color(255, 255, 255));
        spnselect.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        spnselect.setText("Search with Product No#");
        spnselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spnselectActionPerformed(evt);
            }
        });
        jPanel4.add(spnselect, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        minpricetxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        minpricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minpricetxtActionPerformed(evt);
            }
        });
        minpricetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minpricetxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minpricetxtKeyTyped(evt);
            }
        });
        jPanel4.add(minpricetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 139, 130, 37));

        defpricetxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        defpricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defpricetxtActionPerformed(evt);
            }
        });
        defpricetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                defpricetxtKeyTyped(evt);
            }
        });
        jPanel4.add(defpricetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 140, 37));

        freecheck.setBackground(new java.awt.Color(255, 255, 255));
        freecheck.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        freecheck.setText("Free Item");
        jPanel4.add(freecheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(431, 0, 130, 30));

        freecheck1.setBackground(new java.awt.Color(255, 255, 255));
        freecheck1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        freecheck1.setText("Free Item");
        jPanel4.add(freecheck1, new org.netbeans.lib.awtextra.AbsoluteConstraints(431, 0, 130, 30));

        cscheck.setBackground(new java.awt.Color(255, 255, 255));
        cscheck.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cscheck.setText("Combine Stock");
        cscheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cscheckActionPerformed(evt);
            }
        });
        jPanel4.add(cscheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, 130, 30));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, "card2");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cpnametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpnametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cpnametxtActionPerformed

    private void cpidtxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpidtxtKeyReleased
        if(cpidtxt.getText().isEmpty()){
            numberlist1.setVisible(false);
            numberlist2.setVisible(false);
            clear(2);
            stockload();
        }else {
            searchproduct(3);
        }
        
        if(numberlist1.isVisible()){
            if(evt.getKeyCode() == KeyEvent.VK_DOWN){
                
                if(numberlist1.getModel().getSize() == 0){
                
                }else{
                    numberlist1.requestFocus();
                    numberlist1.setSelectedIndex(0);
                }
            }
        }
    }//GEN-LAST:event_cpidtxtKeyReleased

    private void pidtxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pidtxtKeyReleased
        searchproduct(1);
    }//GEN-LAST:event_pidtxtKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        saveproduct();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        new newcatagary(null, true).setVisible(true);
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        save();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void suppliercomboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_suppliercomboItemStateChanged
        if(suppliercombo.getItemCount() == 0){
            
        }else{
            setsupp();
        }
        
    }//GEN-LAST:event_suppliercomboItemStateChanged

    private void cpidtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpidtxtActionPerformed
        if(cpidtxt.getText().isEmpty()){
            //new quicksrh(null, true ).setVisible(true);
        }else if(cpnametxt.getText().isEmpty()){
            
        }else{
            cbuytxt.requestFocus();
        }
    }//GEN-LAST:event_cpidtxtActionPerformed

    private void cbuytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbuytxtActionPerformed
        if(cbuytxt.getText().isEmpty()){
        
        }else{
            cqtytxt.requestFocus();
        }
    }//GEN-LAST:event_cbuytxtActionPerformed

    private void lowstocktxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowstocktxtActionPerformed
        if(lowstocktxt.getText().isEmpty()){
        
        }else{
            save();
        }
    }//GEN-LAST:event_lowstocktxtActionPerformed

    private void maxpricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxpricetxtActionPerformed
        if(maxpricetxt.getText().isEmpty()){
        
        }else{
            defpricetxt.requestFocus();
        }
    }//GEN-LAST:event_maxpricetxtActionPerformed

    private void cqtytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cqtytxtActionPerformed
        if(cqtytxt.getText().isEmpty()){
        
        }else{
            minpricetxt.requestFocus();
        }
    }//GEN-LAST:event_cqtytxtActionPerformed

    private void cbuytxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbuytxtKeyReleased
        subtotalgen();
    }//GEN-LAST:event_cbuytxtKeyReleased

    private void cqtytxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cqtytxtKeyReleased
        subtotalgen();
    }//GEN-LAST:event_cqtytxtKeyReleased

    private void pnametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pnametxtActionPerformed
        if(pidtxt.getText().isEmpty()){
            loadnextpid();
        }else if(pnametxt.getText().isEmpty()){
            pnametxt.requestFocus();
        }else{
            saveproduct();
        }
    }//GEN-LAST:event_pnametxtActionPerformed

    private void catagarycomboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_catagarycomboMouseClicked
        //pnametxt.requestFocus();
    }//GEN-LAST:event_catagarycomboMouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        supplier_reg2 sr = new supplier_reg2( null ,false , this);
        sr.setVisible(true);
        
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        catagaryload();
        supplierload();
        productload();
        stockload();
        clear(1);
        clear(2);
        loadnextpid();
        
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jButton1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1KeyReleased

    private void rb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb1ActionPerformed
        selectbarcode();
    }//GEN-LAST:event_rb1ActionPerformed

    private void rb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb2ActionPerformed
        selectbarcode();
    }//GEN-LAST:event_rb2ActionPerformed

    private void catagarycomboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_catagarycomboItemStateChanged
        selectbarcode();
    }//GEN-LAST:event_catagarycomboItemStateChanged

    private void spnselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spnselectActionPerformed
        stockload();
    }//GEN-LAST:event_spnselectActionPerformed

    private void numberlist1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numberlist1MouseClicked
            String cnum = numberlist1.getSelectedValue().toString();
            String arr[] = cnum.split(" - ", 2);
            cpidtxt.setText(arr[0]);
            searchproduct(2);
            numberlist1.setVisible(false);
            numberlist2.setVisible(false);
            cbuytxt.requestFocus();
    }//GEN-LAST:event_numberlist1MouseClicked

    private void numberlist1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_numberlist1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_numberlist1ValueChanged

    private void minpricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minpricetxtActionPerformed
        if(minpricetxt.getText().isEmpty()){
        
        }else{
            maxpricetxt.requestFocus();
        }
    }//GEN-LAST:event_minpricetxtActionPerformed

    private void minpricetxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minpricetxtKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_minpricetxtKeyReleased

    private void defpricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defpricetxtActionPerformed
        if(defpricetxt.getText().isEmpty()){
        
        }else{
            lowstocktxt.requestFocus();
        }
    }//GEN-LAST:event_defpricetxtActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new updateproduct(null, false).setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void pnametxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnametxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals("/") || key.equals(" ") || key.equals("(") || key.equals(")") || key.equals("-") || key.equals("+") || key.equals("/")|| key.equals(",")|| key.equals(".") || key.equals(".") || Character.isAlphabetic(c))) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
        
        if(pnametxt.getText().length() == 0 && key.equals(" ") ){
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_pnametxtKeyTyped

    private void cpidtxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpidtxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals("/") || key.equals(" ") || key.equals("(") || key.equals(")") || key.equals("-") || key.equals("+") || key.equals("/")|| key.equals(",")|| key.equals(".") || key.equals(".") || Character.isAlphabetic(c))) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
        
        if(cpidtxt.getText().length() == 0 && key.equals(" ") ){
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_cpidtxtKeyTyped

    private void cpnametxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpnametxtKeyTyped
         char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals("/") || key.equals("(") || key.equals(")") || key.equals("-") || key.equals("+") 
                || key.equals("/")|| key.equals(",")|| key.equals(".") || key.equals(".") || Character.isAlphabetic(c))) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_cpnametxtKeyTyped

    private void cbuytxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbuytxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(cbuytxt.getText().contains(".") && key.equals(".")){
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_cbuytxtKeyTyped

    private void cqtytxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cqtytxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(cqtytxt.getText().contains(".") && key.equals(".")){
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_cqtytxtKeyTyped

    private void minpricetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minpricetxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(minpricetxt.getText().contains(".") && key.equals(".")){
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_minpricetxtKeyTyped

    private void maxpricetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxpricetxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(maxpricetxt.getText().contains(".") && key.equals(".")){
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_maxpricetxtKeyTyped

    private void defpricetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_defpricetxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(defpricetxt.getText().contains(".") && key.equals(".")){
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_defpricetxtKeyTyped

    private void lowstocktxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lowstocktxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(lowstocktxt.getText().contains(".") && key.equals(".")){
            evt.consume();
	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_lowstocktxtKeyTyped

    private void pidtxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pidtxtKeyTyped
         char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals("/") || key.equals("(") || key.equals(")") || key.equals("-") || key.equals("+") 
                || key.equals("/")|| key.equals(",")|| key.equals(".") || key.equals(".") || Character.isAlphabetic(c))) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_pidtxtKeyTyped

    private void numberlist1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberlist1KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String cnum = numberlist1.getSelectedValue().toString();
            String arr[] = cnum.split(" - ", 2);
            cpidtxt.setText(arr[0]);
            searchproduct(2);
            numberlist1.setVisible(false);
            numberlist2.setVisible(false);
            cbuytxt.requestFocus();
        }
    }//GEN-LAST:event_numberlist1KeyReleased

    private void cscheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cscheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cscheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(grnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(grnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(grnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(grnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                grnd dialog = new grnd(new javax.swing.JFrame(), true , "admin" );
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox catagarycombo;
    private javax.swing.JTextField cbuytxt;
    private javax.swing.JTextField cpidtxt;
    private javax.swing.JTextField cpnametxt;
    private javax.swing.JTextField cqtytxt;
    private javax.swing.JCheckBox cscheck;
    private javax.swing.JTextField defpricetxt;
    private javax.swing.JLabel elbl;
    private javax.swing.JCheckBox freecheck;
    private javax.swing.JCheckBox freecheck1;
    private datechooser.beans.DateChooserCombo invdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField lowstocktxt;
    private javax.swing.JTextField maxpricetxt;
    private javax.swing.JTextField minpricetxt;
    private javax.swing.JList numberlist1;
    private javax.swing.JScrollPane numberlist2;
    private javax.swing.JTextField pidtxt;
    private javax.swing.JTextField pnametxt;
    private javax.swing.JTable producttable;
    private javax.swing.JRadioButton rb1;
    private javax.swing.JRadioButton rb2;
    private javax.swing.JCheckBox spnselect;
    private javax.swing.JTable stocktable;
    private javax.swing.JLabel subtotaltxt;
    private javax.swing.JLabel supplbl;
    private javax.swing.JComboBox suppliercombo;
    // End of variables declaration//GEN-END:variables

    private void searchproduct(int i) {
        try {
            
            if(i == 1){
                clear(1);
                elbl.setVisible(false);
                ResultSet rs = d.srh("select name from product where id = '"+pidtxt.getText()+"' ");
                while(rs.next()){
                    pnametxt.setText(rs.getString("name"));
                    elbl.setVisible(true);
                }
            }else if(i == 2){
                clear(2);
                ResultSet rs = d.srh("select name from product where id = '"+cpidtxt.getText()+"' ");
                while(rs.next()){
                    cpnametxt.setText(rs.getString("name"));
                }
                stockload();
            }else if(i == 3){
            
               try {
                    numberlist1.setVisible(true);
                    numberlist2.setVisible(true);
                    jlm1.removeAllElements();
                    ResultSet rs = d.srh("select *  from product where id LIKE '%"+cpidtxt.getText()+"%' OR name LIKE '%"+cpidtxt.getText()+"%' ");
                    for (int j = 0; rs.next(); j++) {
                        jlm1.add(j, rs.getString("id") + " - " + rs.getString("name") );
                    }
                    numberlist1.setModel(jlm1);

                    if(numberlist1.getModel().getSize() == 0){
                        numberlist1.setVisible(false);
                        clear(2);
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
    }

    private void clear(int i) {
    
        if(i == 1){
            pnametxt.setText("");
        }else if(i == 2){
            cpnametxt.setText("");
            cbuytxt.setText("");
            lowstocktxt.setText("");
            cqtytxt.setText("");
            maxpricetxt.setText("");
            minpricetxt.setText("");
            subtotaltxt.setText("");
            minpricetxt.setText("");
            defpricetxt.setText("");
        }else if(i == 3){
            cpidtxt.setText("");
            cpnametxt.setText("");
            cbuytxt.setText("");
            lowstocktxt.setText("");
            minpricetxt.setText("");
            defpricetxt.setText("");
            cqtytxt.setText("");
            maxpricetxt.setText("");
            subtotaltxt.setText("");
            freecheck.setSelected(false);
            cscheck.setSelected(false);
        }
    
    }

    private void catagaryload() {
        try {
            catagarycombo.removeAllItems();
            ResultSet rs = d.srh("select * from brand");
            while (rs.next()) {                
                catagarycombo.addItem(rs.getString("name"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
    }

    private void supplierload() {
    try {
            suppliercombo.removeAllItems();
            ResultSet rs = d.srh("select * from supplier ");
            while (rs.next()) {                
                suppliercombo.addItem(rs.getString("name"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadnextpid() {
        
        rb1.setSelected(true);
        elbl.setVisible(false);
        pidtxt.setText("");
        try {
            String maxbar = "";
            
            if(catagarycombo.getItemCount() == 0){
                
            }else{
            
            String brand = catagarycombo.getSelectedItem().toString();
            ResultSet rs = d.srh("select * from brand where name = '"+brand+"' ");
            while (rs.next()) { 
                maxbar = rs.getString("keycode") + ( rs.getInt("lastid") + 1) ;
                pidtxt.setText(maxbar);
            }
            selectexist(maxbar);
            pnametxt.requestFocus();
            
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void saveproduct(){
        try {
            if(pidtxt.getText().isEmpty()){
            
            }else if(pnametxt.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Please insert product name");
                pnametxt.requestFocus();
            }else{
                
                if(elbl.isVisible()){
                    
                    JOptionPane.showMessageDialog(this, "Product Number Already Exist");
                    
                }else{
                
                int i = d.aud("insert into product (id, name, brand_name) values('"+pidtxt.getText()+"' , '"+pnametxt.getText()+"' , '"+catagarycombo.getSelectedItem().toString()+"' ) ");
                
                if(i == 1){
                    JOptionPane.showMessageDialog(this, "<html> <h4><strong> "+pidtxt.getText() + " - " + pnametxt.getText() +" <strong></h4><br> Product Saved. </html>");
                                       
                    
                    cpidtxt.setText(pidtxt.getText());
                    cpnametxt.setText(pnametxt.getText());
                    pnametxt.setText("");
                    loadnextpid();
                    productload();
                    cbuytxt.requestFocus();
                }else if(i == 0){
                    JOptionPane.showMessageDialog(this, "Something Went Wrong. ");
                }

            }
                
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    

    private void productload() {
        dtm.setRowCount(0);
        try {
            ResultSet rs = d.srh("select * from product order by id desc");
            while (rs.next()) {                
                Vector v  = new Vector();
                v.add(rs.getString("id"));
                v.add(rs.getString("name"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
    }
    
    private void stockload() {
        dtm1.setRowCount(0);
        
        if(spnselect.isSelected()){
        
        
        if(cpnametxt.getText().isEmpty() ){
        
        try {
            ResultSet rs = d.srh("select * from stock inner join product on stock.product_id = product.id order by stock.id desc");
            while (rs.next()) {                
                Vector v  = new Vector();
                v.add(rs.getString("stock.id"));
                v.add(rs.getString("stock.product_id"));
                v.add(rs.getString("product.name"));
                v.add(rs.getString("stock.buyprice"));
                v.add(rs.getString("stock.minprice"));
                v.add(rs.getString("stock.maxprice"));
                v.add(rs.getString("stock.buyqty"));
                v.add(rs.getString("stock.avqty"));
                dtm1.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        }else{
        
        try {
            ResultSet rs = d.srh("select * from stock inner join product on stock.product_id = product.id where product.id = '"+cpidtxt.getText()+"' order by stock.id desc");
            while (rs.next()) {                
                Vector v  = new Vector();
                v.add(rs.getString("stock.id"));
                v.add(rs.getString("stock.product_id"));
                v.add(rs.getString("product.name"));
                v.add(rs.getString("stock.buyprice"));
                v.add(rs.getString("stock.minprice"));
                v.add(rs.getString("stock.maxprice"));
                v.add(rs.getString("stock.buyqty"));
                v.add(rs.getString("stock.avqty"));
                dtm1.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        }
        }else{
        
        try {
            ResultSet rs = d.srh("select * from stock inner join product on stock.product_id = product.id order by stock.id desc");
            while (rs.next()) {                
                Vector v  = new Vector();
                v.add(rs.getString("stock.id"));
                v.add(rs.getString("stock.product_id"));
                v.add(rs.getString("product.name"));
                v.add(rs.getString("stock.buyprice"));
                v.add(rs.getString("stock.minprice"));
                v.add(rs.getString("stock.maxprice"));
                v.add(rs.getString("stock.buyqty"));
                v.add(rs.getString("stock.avqty"));
                dtm1.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        }
    }

    private void save() {
    
        if(cpnametxt.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Insert a valid product");
            pidtxt.requestFocus();
        }else if(cbuytxt.getText().isEmpty()){
            cbuytxt.requestFocus();
        }else if(cqtytxt.getText().isEmpty()){
            cqtytxt.requestFocus();
        }else if(minpricetxt.getText().isEmpty()){
            minpricetxt.requestFocus();
        }else if(maxpricetxt.getText().isEmpty()){
            maxpricetxt.requestFocus();
        }else if(defpricetxt.getText().isEmpty()){
            defpricetxt.requestFocus();
        }else if(lowstocktxt.getText().isEmpty()){
            lowstocktxt.requestFocus();
        }else{
            
            saves();
            
        }
    }
    
    
    private void saves(){
    
            Double buy = Double.parseDouble(cbuytxt.getText());
            Double low = Double.parseDouble(lowstocktxt.getText());
            Double min = Double.parseDouble(minpricetxt.getText());
            Double max = Double.parseDouble(maxpricetxt.getText());
            Double qty = Double.parseDouble(cqtytxt.getText());
            Double def = Double.parseDouble(defpricetxt.getText());
            Double cost = buy*qty;
            
            if(buy <= 0 && !(freecheck.isSelected())){
                JOptionPane.showMessageDialog(this, "Invalid Buy Price");
            }else if(buy >= min){
                JOptionPane.showMessageDialog(this, "Invalid Buy Price or Minimum Price");
                cbuytxt.requestFocus();
            }else if(min > max ){
                JOptionPane.showMessageDialog(this, "Invalid Minimum or Maximum Price");
                lowstocktxt.requestFocus();
            }else if(def > max ){
                JOptionPane.showMessageDialog(this, "Invalid Default Price");
                lowstocktxt.requestFocus();
            }else if(def < min ){
                JOptionPane.showMessageDialog(this, "Invalid Default Price");
                lowstocktxt.requestFocus();
            }else if(qty <= 0){
                JOptionPane.showMessageDialog(this, "Invalid Qty");
                cqtytxt.requestFocus();
            }else if(low <= 0){
                JOptionPane.showMessageDialog(this, "Invalid Low Stock Value");
                cqtytxt.requestFocus();
            }else{
                
                int supplier = Integer.parseInt(supplbl.getText());
                
                if(supplier == 0){
                
                int res = JOptionPane.showConfirmDialog(this, "Are You sure to continue with CashBuyer" , "" , JOptionPane.YES_NO_OPTION);
                
                if(res == 0){
                try {
                    
                    if(cscheck.isSelected()){
                        double q = 0.0;
                        double qcost = 0.0;
                        int csa = 0;
                        ResultSet rs = d.srh("select id , buyprice ,avqty from stock where product_id = '"+cpidtxt.getText()+"' and avqty>0 ");
                        while(rs.next()){
                            csa = 1;
                            q = q + rs.getDouble("avqty");
                            qcost = rs.getDouble("buyprice");
                        }
                        
                        if(qcost == buy){
                            double avqty = qty + q;
                            
                            int stockid  = d.nextnum("select max(id) from stock", "max(id)");
                            int i2 = d.aud("update stock set avqty = 0 where product_id = '"+cpidtxt.getText()+"' ");
                            int i = d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active) "
                                    + "Values( '"+stockid+"' ,'"+cpidtxt.getText()+"' ,'"+supplbl.getText()+"' ,'"+buy+"' ,'"+qty+"' , buyprice*buyqty  ,'"+min+"' ,'"+max+"' ,'"+def+"'  , '"+avqty+"', '0' , '"+low+"'  , '"+user+"'  , '"+invdate.getText()+"'  ,'1' ) ");
                            int i1 = d.aud("update supplier set balance = balance + '"+cost+"' where id = '"+supplier+"' ");
                            
                            if(i == 1){
                                JOptionPane.showMessageDialog(this, "Saved Succesfuly with Combined Stock.");
                                clear(3);
                                stockload();
                                cpidtxt.requestFocus();
                            }else{
                                JOptionPane.showMessageDialog(this, "Something Went Wrong.");
                            }
                            
                        }else{
                            JOptionPane.showMessageDialog(this, "<html>Last Stock Buy Price is not equal for today buyprice.<br>Please Uncheck the cobine stock and try again</html>");
                        }
                        
                    }else{
                    
                    int stockid  = d.nextnum("select max(id) from stock", "max(id)");
                    int i = d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active) "
                            + "Values( '"+stockid+"' ,'"+cpidtxt.getText()+"' ,'"+supplbl.getText()+"' ,'"+buy+"' ,'"+qty+"' , buyprice*buyqty  ,'"+min+"' ,'"+max+"' ,'"+def+"'  , buyqty , '0' , '"+low+"'  , '"+user+"'  , '"+invdate.getText()+"'  ,'1' ) ");
                    int i1 = d.aud("update supplier set balance = balance + '"+cost+"' where id = '"+supplier+"' ");
                
                    if(i == 1){
                        JOptionPane.showMessageDialog(this, "Saved Succesfuly.");
                        clear(3);
                        stockload();
                        cpidtxt.requestFocus();
                    }else{
                        JOptionPane.showMessageDialog(this, "Something Went Wrong.");
                    }
                    
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                }else{
                    suppliercombo.requestFocus();
                }
                
                }else{
                    try {
                    
                    if(cscheck.isSelected()){
                        double q = 0.0;
                        double qcost = 0.0;
                        int csa = 0;
                        ResultSet rs = d.srh("select id , buyprice , avqty from stock where product_id = '"+cpidtxt.getText()+"' and avqty>0 ");
                        while(rs.next()){
                            csa = 1;
                            q = q + rs.getDouble("avqty");
                            qcost = rs.getDouble("buyprice");
                        }
                        
                        if(qcost == buy){
                            double avqty = qty + q;
                            
                            int i2 = d.aud("update stock set avqty = 0 where product_id = '"+cpidtxt.getText()+"' ");
                            
                            int stockid  = d.nextnum("select max(id) from stock", "max(id)");
                            int i = d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active) "
                                + "Values( '"+stockid+"' ,'"+cpidtxt.getText()+"' ,'"+supplbl.getText()+"' ,'"+buy+"' ,'"+qty+"' , buyprice*buyqty  ,'"+min+"' ,'"+max+"' ,'"+def+"'  , '"+avqty+"' , '0' , '"+low+"'  , '"+user+"'  , '"+invdate.getText()+"'  ,'1' ) ");
                            int i1 = d.aud("update supplier set balance = balance + '"+cost+"' where id = '"+supplier+"' ");

                            
                            if(i == 1){
                                JOptionPane.showMessageDialog(this, "Saved Succesfuly with Combined Stock.");
                                clear(3);
                                stockload();
                                cpidtxt.requestFocus();
                            }else{
                                JOptionPane.showMessageDialog(this, "Something Went Wrong.");
                            }
                            
                        }else{
                            JOptionPane.showMessageDialog(this, "<html>Last Stock Buy Price is not equal for today buyprice.<br>Please Uncheck the cobine stock and try again</html>");
                        }
                        
                    }else{
                        
                        int stockid  = d.nextnum("select max(id) from stock", "max(id)");
                        int i = d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active) "
                                + "Values( '"+stockid+"' ,'"+cpidtxt.getText()+"' ,'"+supplbl.getText()+"' ,'"+buy+"' ,'"+qty+"' , buyprice*buyqty  ,'"+min+"' ,'"+max+"' ,'"+def+"'  , buyqty , '0' , '"+low+"'  , '"+user+"'  , '"+invdate.getText()+"'  ,'1' ) ");
                        int i1 = d.aud("update supplier set balance = balance + '"+cost+"' where id = '"+supplier+"' ");

                        if(i == 1){
                            JOptionPane.showMessageDialog(this, "Saved Succesfuly.");
                            clear(3);
                            stockload();
                            cpidtxt.requestFocus();
                        }else{
                            JOptionPane.showMessageDialog(this, "Something Went Wrong.");
                        }
                    
                    }
                    
                    
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                  
                }
                
            }
    
    
    }
    
    
    private void setsupp() {
    
        try {
            ResultSet rs = d.srh("select * from supplier where name = '"+suppliercombo.getSelectedItem().toString()+"' ");
            while (rs.next()) {                
                supplbl.setText(rs.getString("id"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
    }

    private void subtotalgen() {
    
        if(cbuytxt.getText().isEmpty()){
            subtotaltxt.setText("Rs. 0.00");
        }else if(cqtytxt.getText().isEmpty()){
            subtotaltxt.setText("Rs. 0.00");
        }else{
            double buy = Double.parseDouble(cbuytxt.getText());
            double qty = Double.parseDouble(cqtytxt.getText());
            subtotaltxt.setText("Rs. " + (buy * qty));
        }
    
    }

    private void selectbarcode() {
    
        if(rb1.isSelected()){
            pidtxt.setText("");
            pidtxt.setEditable(false);
            loadnextpid();
        }else if(rb2.isSelected()){
            pidtxt.setEditable(true);
            pidtxt.setText("");
            pidtxt.requestFocus();
            
        }
    
    }
    
    private void selectexist(String id){
        
        try {
            
            int i = 0;
            
            ResultSet rs = d.srh("select * from product where id = '"+id+"' ");
            while (rs.next()) {                
                i = 1;
            }
            
            if(i == 1){
                d.aud("update brand set lastid = lastid + 1 where name = '"+catagarycombo.getSelectedItem().toString()+"' ");
                loadnextpid();
            }
            
            searchproduct(1);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
    }
    
    public void selectsupplier(String sid , String name){
        supplierload();
        suppliercombo.setSelectedItem(name);
        supplbl.setText(sid);
    }
    
        
}
