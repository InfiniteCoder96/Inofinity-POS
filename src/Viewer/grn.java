/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Viewer;

import Model.DB;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.xswingx.PromptSupport;

/**
 *
 * @author Ashan Lakshitha
 */
public class grn extends javax.swing.JDialog {

    /**
     * Creates new form grn
     */
    DB d = new DB();
    DefaultTableModel dtm;
    DefaultTableModel dtm1;
    String user;
    String supplier;
    DefaultListModel jlm1 ;
    SimpleDateFormat sdf;
    int pt = 0;
    
    public grn(java.awt.Frame parent, boolean modal , String u ) {
        super(parent, modal);
        initComponents();
        dtm = (DefaultTableModel) producttable.getModel();
        dtm1 = (DefaultTableModel) stocktable.getModel();
        user = u;
        jlm1 = new DefaultListModel();
        rb1.setSelected(true);
        elbl.setVisible(false);
        pidtxt.setEditable(false);
        numberlist1.setVisible(false);
        numberlist2.setVisible(false);
        spnselect.setSelected(true);
        this.sdf = new SimpleDateFormat("yyyy-MM-dd");
        this.datecombo.setDateFormat(this.sdf);
        this.datecombo.setMinDate(Calendar.getInstance());
        setexpirecombo();
        catagaryload();
        setFrontText();
        supplierload();
        selectbarcode();
        productload();
        stockload();
        
        //jButton2.setVisible(false);
        //pnametxt1.setVisible(false);
        
    }
    
        private void setFrontText() {
        //setPront(cidtxt , "Customer ID");
        //setPront(cnametxt, "Customer Name");
        setPront(pidtxt, "New Barcode");
        setPront(pnametxt, "English Product Name");
        setPront(pnametxt1, "isxy, ku");
        setPront(cpidtxt, "Barcode No#");
        setPront(cpnametxt, "Product Name");
        setPront(cqtytxt, "Product Qty");
        setPront(this.cbuytxt, "Buy Price");
        setPront(this.minpricetxt, "WholeSale Price");
        setPront(this.maxpricetxt, "Retail Price");
        setPront(this.defpricetxt, "Our Price");
        setPront(this.lowstocktxt, "Low Stock Reminder");
        
    }

    private void setPront(JTextField a, String text) {
        PromptSupport.setPrompt(text, a);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.SHOW_PROMPT, a);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        suppliercombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        supplbl = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        pidtxt = new javax.swing.JTextField();
        pnametxt = new javax.swing.JTextField();
        catagarycombo = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        producttable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        elbl = new javax.swing.JLabel();
        rb1 = new javax.swing.JRadioButton();
        rb2 = new javax.swing.JRadioButton();
        jButton5 = new javax.swing.JButton();
        pnametxt1 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        numberlist2 = new javax.swing.JScrollPane();
        numberlist1 = new javax.swing.JList();
        cpnametxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbuytxt = new javax.swing.JTextField();
        lowstocktxt = new javax.swing.JTextField();
        cqtytxt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        stocktable = new javax.swing.JTable();
        maxpricetxt = new javax.swing.JTextField();
        subtotaltxt = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cpidtxt = new javax.swing.JTextField();
        spnselect = new javax.swing.JCheckBox();
        minpricetxt = new javax.swing.JTextField();
        freecheck = new javax.swing.JCheckBox();
        freecheck1 = new javax.swing.JCheckBox();
        cscheck = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        datecombo = new datechooser.beans.DateChooserCombo();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        defpricetxt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 102));
        jLabel2.setText("Stock");

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 102));
        jLabel1.setText("create");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel3.setText("Supplier Information");

        suppliercombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        suppliercombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                suppliercomboItemStateChanged(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/desktop-pc-computer-128.png"))); // NOI18N

        supplbl.setText("0");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("+");
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/refresh-circle-blue-24.png"))); // NOI18N
        jLabel4.setToolTipText("Refresh Window");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(supplbl))
                    .addComponent(suppliercombo, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(supplbl))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(suppliercombo)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel6.setText("Product Registration");

        pidtxt.setFont(new java.awt.Font("Iskoola Pota", 0, 14)); // NOI18N
        pidtxt.setFocusable(false);
        pidtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pidtxtActionPerformed(evt);
            }
        });
        pidtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pidtxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pidtxtKeyTyped(evt);
            }
        });

        pnametxt.setFont(new java.awt.Font("Iskoola Pota", 0, 18)); // NOI18N
        pnametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pnametxtActionPerformed(evt);
            }
        });
        pnametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pnametxtKeyTyped(evt);
            }
        });

        catagarycombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        catagarycombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                catagarycomboItemStateChanged(evt);
            }
        });
        catagarycombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                catagarycomboMouseClicked(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jButton1.setText("Save & Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButton1KeyReleased(evt);
            }
        });

        producttable.setFont(new java.awt.Font("Iskoola Pota", 0, 14)); // NOI18N
        producttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Name"
            }
        ));
        producttable.setOpaque(false);
        producttable.setRowHeight(20);
        producttable.setSelectionBackground(new java.awt.Color(0, 153, 153));
        jScrollPane1.setViewportView(producttable);
        if (producttable.getColumnModel().getColumnCount() > 0) {
            producttable.getColumnModel().getColumn(0).setMinWidth(70);
            producttable.getColumnModel().getColumn(0).setPreferredWidth(70);
            producttable.getColumnModel().getColumn(0).setMaxWidth(70);
            producttable.getColumnModel().getColumn(1).setMinWidth(150);
            producttable.getColumnModel().getColumn(1).setPreferredWidth(150);
            producttable.getColumnModel().getColumn(1).setMaxWidth(150);
        }

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("+");
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        elbl.setForeground(new java.awt.Color(204, 0, 0));
        elbl.setText("* Exist");

        buttonGroup1.add(rb1);
        rb1.setText("Generate");
        rb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(rb2);
        rb2.setText("Exiting Barcode");
        rb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb2ActionPerformed(evt);
            }
        });

        jButton5.setText("Delete Product ID");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        pnametxt1.setFont(new java.awt.Font("FMBindumathi", 0, 18)); // NOI18N
        pnametxt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pnametxt1ActionPerformed(evt);
            }
        });
        pnametxt1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pnametxt1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(26, 102, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(pnametxt1)
                            .addComponent(pnametxt)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pidtxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(catagarycombo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                                    .addComponent(elbl)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(rb1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rb2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb1)
                    .addComponent(rb2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(catagarycombo, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pidtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(elbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnametxt1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(27, 27, 27))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {catagarycombo, pidtxt});

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));
        jPanel4.setOpaque(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        numberlist1.setBackground(new java.awt.Color(0, 0, 0));
        numberlist1.setFont(new java.awt.Font("Iskoola Pota", 0, 14)); // NOI18N
        numberlist1.setForeground(new java.awt.Color(255, 255, 255));
        numberlist1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        numberlist1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        numberlist1.setSelectionBackground(new java.awt.Color(0, 102, 102));
        numberlist1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                numberlist1MouseClicked(evt);
            }
        });
        numberlist1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numberlist1KeyReleased(evt);
            }
        });
        numberlist1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                numberlist1ValueChanged(evt);
            }
        });
        numberlist2.setViewportView(numberlist1);

        jPanel4.add(numberlist2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 490, 130));

        cpnametxt.setEditable(false);
        cpnametxt.setFont(new java.awt.Font("Iskoola Pota", 0, 14)); // NOI18N
        cpnametxt.setFocusable(false);
        cpnametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpnametxtActionPerformed(evt);
            }
        });
        cpnametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cpnametxtKeyTyped(evt);
            }
        });
        jPanel4.add(cpnametxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 43, 368, 37));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel7.setText("Create Stock");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        cbuytxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cbuytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbuytxtActionPerformed(evt);
            }
        });
        cbuytxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbuytxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cbuytxtKeyTyped(evt);
            }
        });
        jPanel4.add(cbuytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 179, 37));

        lowstocktxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lowstocktxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowstocktxtActionPerformed(evt);
            }
        });
        lowstocktxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lowstocktxtKeyTyped(evt);
            }
        });
        jPanel4.add(lowstocktxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 160, 90, 40));

        cqtytxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cqtytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cqtytxtActionPerformed(evt);
            }
        });
        cqtytxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cqtytxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cqtytxtKeyTyped(evt);
            }
        });
        jPanel4.add(cqtytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 179, 37));

        jButton2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jButton2.setText("Save & Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(419, 210, 140, 36));

        stocktable.setFont(new java.awt.Font("Iskoola Pota", 0, 14)); // NOI18N
        stocktable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No#", "Barcode", "Name", "Cost", "Min", "Max", "Our", "Qty", "Av.Qty", "Low"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stocktable.setOpaque(false);
        stocktable.setRowHeight(20);
        stocktable.setSelectionBackground(new java.awt.Color(0, 153, 153));
        stocktable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stocktableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(stocktable);
        if (stocktable.getColumnModel().getColumnCount() > 0) {
            stocktable.getColumnModel().getColumn(0).setMinWidth(35);
            stocktable.getColumnModel().getColumn(0).setPreferredWidth(35);
            stocktable.getColumnModel().getColumn(0).setMaxWidth(35);
            stocktable.getColumnModel().getColumn(1).setMinWidth(70);
            stocktable.getColumnModel().getColumn(1).setPreferredWidth(70);
            stocktable.getColumnModel().getColumn(1).setMaxWidth(70);
            stocktable.getColumnModel().getColumn(2).setMinWidth(150);
            stocktable.getColumnModel().getColumn(2).setPreferredWidth(150);
            stocktable.getColumnModel().getColumn(2).setMaxWidth(150);
            stocktable.getColumnModel().getColumn(7).setMinWidth(50);
            stocktable.getColumnModel().getColumn(7).setPreferredWidth(50);
            stocktable.getColumnModel().getColumn(7).setMaxWidth(50);
        }

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 257, 570, 130));

        maxpricetxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        maxpricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxpricetxtActionPerformed(evt);
            }
        });
        maxpricetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxpricetxtKeyTyped(evt);
            }
        });
        jPanel4.add(maxpricetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 90, 40));

        subtotaltxt.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        subtotaltxt.setForeground(new java.awt.Color(153, 0, 0));
        subtotaltxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtotaltxt.setText("Rs. 0.00");
        jPanel4.add(subtotaltxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, 170, 36));

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/ui_04_of_9-15-20.png"))); // NOI18N
        jLabel9.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel5.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 0, 30, 30));

        cpidtxt.setFont(new java.awt.Font("Iskoola Pota", 0, 14)); // NOI18N
        cpidtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpidtxtActionPerformed(evt);
            }
        });
        cpidtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cpidtxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cpidtxtKeyTyped(evt);
            }
        });
        jPanel5.add(cpidtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 177, 37));

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 43, 179, -1));

        spnselect.setBackground(new java.awt.Color(255, 255, 255));
        spnselect.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        spnselect.setText("Search with Product No#");
        spnselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spnselectActionPerformed(evt);
            }
        });
        jPanel4.add(spnselect, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, -1));

        minpricetxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        minpricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minpricetxtActionPerformed(evt);
            }
        });
        minpricetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minpricetxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minpricetxtKeyTyped(evt);
            }
        });
        jPanel4.add(minpricetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 110, 40));

        freecheck.setBackground(new java.awt.Color(255, 255, 255));
        freecheck.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        freecheck.setText("Free Item");
        jPanel4.add(freecheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(431, 0, 130, 30));

        freecheck1.setBackground(new java.awt.Color(255, 255, 255));
        freecheck1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        freecheck1.setText("Free Item");
        jPanel4.add(freecheck1, new org.netbeans.lib.awtextra.AbsoluteConstraints(431, 0, 130, 30));

        cscheck.setBackground(new java.awt.Color(255, 255, 255));
        cscheck.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cscheck.setText("Combine Stock");
        cscheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cscheckActionPerformed(evt);
            }
        });
        jPanel4.add(cscheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, 130, 30));

        jCheckBox1.setText("Expire");
        jCheckBox1.setOpaque(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel4.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 150, 110, 20));
        jPanel4.add(datecombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 170, 110, 30));

        jLabel11.setText("Low Stock");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 140, -1, 20));

        jLabel12.setText("Buy Qty");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, -1, 10));

        jLabel13.setText("Retail Price");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 70, 20));

        jLabel14.setText("WholeSale Price");
        jPanel4.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 144, -1, 20));

        jLabel15.setText("Buy Price");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, 10));

        jButton4.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jButton4.setText("Save");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 210, 99, 36));

        defpricetxt.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        defpricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defpricetxtActionPerformed(evt);
            }
        });
        defpricetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                defpricetxtKeyTyped(evt);
            }
        });
        jPanel4.add(defpricetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 110, 40));

        jLabel16.setText("Our Price");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 140, 80, 20));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(11, 11, 11))
        );

        getContentPane().add(jPanel1, "card2");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cpnametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpnametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cpnametxtActionPerformed

    private void cpidtxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpidtxtKeyReleased
        if(cpidtxt.getText().isEmpty()){
            numberlist1.setVisible(false);
            numberlist2.setVisible(false);
            clear(2);
            stockload();
        }else {
            searchproduct(3);
        }
        
        if(numberlist1.isVisible()){
            if(evt.getKeyCode() == KeyEvent.VK_DOWN){
                
                if(numberlist1.getModel().getSize() == 0){
                
                }else{
                    numberlist1.requestFocus();
                    numberlist1.setSelectedIndex(0);
                }
            }
        }
    }//GEN-LAST:event_cpidtxtKeyReleased

    private void pidtxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pidtxtKeyReleased
        searchproduct(1);
    }//GEN-LAST:event_pidtxtKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        saveproduct();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        new newcatagary(null, true).setVisible(true);
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        save(1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void suppliercomboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_suppliercomboItemStateChanged
        if(suppliercombo.getItemCount() == 0){
            
        }else{
            setsupp();
        }
        
    }//GEN-LAST:event_suppliercomboItemStateChanged

    private void cpidtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpidtxtActionPerformed
        if(cpidtxt.getText().isEmpty()){
            //new quicksrh(null, true ).setVisible(true);
        }else if(cpnametxt.getText().isEmpty()){
            
        }else{
            cbuytxt.requestFocus();
        }
    }//GEN-LAST:event_cpidtxtActionPerformed

    private void cbuytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbuytxtActionPerformed
        if(cbuytxt.getText().isEmpty()){
        
        }else{
            cqtytxt.requestFocus();
        }
    }//GEN-LAST:event_cbuytxtActionPerformed

    private void lowstocktxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowstocktxtActionPerformed
        if(lowstocktxt.getText().isEmpty()){
            lowstocktxt.requestFocus();
        }else{
            
        }
    }//GEN-LAST:event_lowstocktxtActionPerformed

    private void maxpricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxpricetxtActionPerformed
        if(maxpricetxt.getText().isEmpty()){
        
        }else{
            defpricetxt.requestFocus();
        }
    }//GEN-LAST:event_maxpricetxtActionPerformed

    private void cqtytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cqtytxtActionPerformed
        if(cqtytxt.getText().isEmpty()){
        
        }else{
            minpricetxt.requestFocus();
        }
    }//GEN-LAST:event_cqtytxtActionPerformed

    private void cbuytxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbuytxtKeyReleased
        //genmin();
        subtotalgen();
    }//GEN-LAST:event_cbuytxtKeyReleased

    private void cqtytxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cqtytxtKeyReleased
        subtotalgen();
    }//GEN-LAST:event_cqtytxtKeyReleased

    private void pnametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pnametxtActionPerformed
        if(pidtxt.getText().isEmpty()){
            loadnextpid();
        }else if(pnametxt.getText().isEmpty()){
            pnametxt.requestFocus();
        }else{
            saveproduct();
        }
    }//GEN-LAST:event_pnametxtActionPerformed

    private void catagarycomboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_catagarycomboMouseClicked
        //pnametxt.requestFocus();
    }//GEN-LAST:event_catagarycomboMouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        supplier_reg sr = new supplier_reg( null ,false , this);
        sr.setVisible(true);
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        catagaryload();
        supplierload();
        productload();
        stockload();
        clear(1);
        clear(2);
        loadnextpid();
        
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jButton1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1KeyReleased

    private void rb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb1ActionPerformed
        selectbarcode();
    }//GEN-LAST:event_rb1ActionPerformed

    private void rb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb2ActionPerformed
        selectbarcode();
    }//GEN-LAST:event_rb2ActionPerformed

    private void catagarycomboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_catagarycomboItemStateChanged
        selectbarcode();
    }//GEN-LAST:event_catagarycomboItemStateChanged

    private void spnselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spnselectActionPerformed
        stockload();
    }//GEN-LAST:event_spnselectActionPerformed

    private void numberlist1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numberlist1MouseClicked
            String cnum = numberlist1.getSelectedValue().toString();
            String arr[] = cnum.split(" - ", 2);
            cpidtxt.setText(arr[0]);
            searchproduct(2);
            numberlist1.setVisible(false);
            numberlist2.setVisible(false);
            cbuytxt.requestFocus();
    }//GEN-LAST:event_numberlist1MouseClicked

    private void numberlist1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_numberlist1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_numberlist1ValueChanged

    private void minpricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minpricetxtActionPerformed
        if(minpricetxt.getText().isEmpty()){
        
        }else{
            maxpricetxt.requestFocus();
        }
    }//GEN-LAST:event_minpricetxtActionPerformed

    private void minpricetxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minpricetxtKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_minpricetxtKeyReleased

    private void pnametxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnametxtKeyTyped
        /*
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals("/") || key.equals(" ") || key.equals("(") || key.equals(")") || key.equals("-") || key.equals("+") || key.equals("/")|| key.equals(",")|| key.equals(".") || key.equals(".") || Character.isAlphabetic(c))) {
            evt.consume();
//            Toolkit.getDefaultToolkit().beep();
        }
        
        if(pnametxt.getText().length() == 0 && key.equals(" ") ){
            evt.consume();
//            Toolkit.getDefaultToolkit().beep();
        }
        */
    }//GEN-LAST:event_pnametxtKeyTyped

    private void cpidtxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpidtxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals("/") || key.equals(" ") || key.equals("(") || key.equals(")") || key.equals("-") || key.equals("+") || key.equals("/")|| key.equals(",")|| key.equals(".") || key.equals(".") || Character.isAlphabetic(c))) {
            evt.consume();
////            Toolkit.getDefaultToolkit().beep();
        }
        
        if(cpidtxt.getText().length() == 0 && key.equals(" ") ){
            evt.consume();
////            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_cpidtxtKeyTyped

    private void cpnametxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpnametxtKeyTyped
         char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals("/") || key.equals("(") || key.equals(")") || key.equals("-") || key.equals("+") 
                || key.equals("/")|| key.equals(",")|| key.equals(".") || key.equals(".") || Character.isAlphabetic(c))) {
            evt.consume();
////            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_cpnametxtKeyTyped

    private void cbuytxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbuytxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
////	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(cbuytxt.getText().contains(".") && key.equals(".")){
            evt.consume();
////	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_cbuytxtKeyTyped

    private void cqtytxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cqtytxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
//	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(cqtytxt.getText().contains(".") && key.equals(".")){
            evt.consume();
//	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_cqtytxtKeyTyped

    private void minpricetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minpricetxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
//	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(minpricetxt.getText().contains(".") && key.equals(".")){
            evt.consume();
//	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_minpricetxtKeyTyped

    private void maxpricetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxpricetxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
//	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(maxpricetxt.getText().contains(".") && key.equals(".")){
            evt.consume();
//	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_maxpricetxtKeyTyped

    private void lowstocktxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lowstocktxtKeyTyped
        char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals(".") )) {
            evt.consume();
//	    Toolkit.getDefaultToolkit().beep();
        } 
        
        if(lowstocktxt.getText().contains(".") && key.equals(".")){
            evt.consume();
//	    Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_lowstocktxtKeyTyped

    private void pidtxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pidtxtKeyTyped
         char c = evt.getKeyChar();
        
        String key = String.valueOf(c);
        
        if  (!(Character.isDigit(c) || key.equals("/") || key.equals("(") || key.equals(")") || key.equals("-") || key.equals("+") 
                || key.equals("/")|| key.equals(",")|| key.equals(".") || key.equals(".") || Character.isAlphabetic(c))) {
            evt.consume();
//            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_pidtxtKeyTyped

    private void numberlist1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberlist1KeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String cnum = numberlist1.getSelectedValue().toString();
            String arr[] = cnum.split(" - ", 2);
            cpidtxt.setText(arr[0]);
            searchproduct(2);
            numberlist1.setVisible(false);
            numberlist2.setVisible(false);
            cbuytxt.requestFocus();
        }
    }//GEN-LAST:event_numberlist1KeyReleased

    private void cscheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cscheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cscheckActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        setexpirecombo();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void stocktableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stocktableMouseClicked
        selectrowgrn();
    }//GEN-LAST:event_stocktableMouseClicked

    private void pidtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pidtxtActionPerformed
        pnametxt.requestFocus();
    }//GEN-LAST:event_pidtxtActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        save(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        new deleteproduct(null, false).setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void pnametxt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pnametxt1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pnametxt1ActionPerformed

    private void pnametxt1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnametxt1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_pnametxt1KeyTyped

    private void defpricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defpricetxtActionPerformed
        if(defpricetxt.getText().isEmpty()){
        
        }else{
            lowstocktxt.requestFocus();
        }
    }//GEN-LAST:event_defpricetxtActionPerformed

    private void defpricetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_defpricetxtKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_defpricetxtKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                grn dialog = new grn(new javax.swing.JFrame(), true , "admin" );
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox catagarycombo;
    private javax.swing.JTextField cbuytxt;
    private javax.swing.JTextField cpidtxt;
    private javax.swing.JTextField cpnametxt;
    private javax.swing.JTextField cqtytxt;
    private javax.swing.JCheckBox cscheck;
    private datechooser.beans.DateChooserCombo datecombo;
    private javax.swing.JTextField defpricetxt;
    private javax.swing.JLabel elbl;
    private javax.swing.JCheckBox freecheck;
    private javax.swing.JCheckBox freecheck1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField lowstocktxt;
    private javax.swing.JTextField maxpricetxt;
    private javax.swing.JTextField minpricetxt;
    private javax.swing.JList numberlist1;
    private javax.swing.JScrollPane numberlist2;
    private javax.swing.JTextField pidtxt;
    private javax.swing.JTextField pnametxt;
    private javax.swing.JTextField pnametxt1;
    private javax.swing.JTable producttable;
    private javax.swing.JRadioButton rb1;
    private javax.swing.JRadioButton rb2;
    private javax.swing.JCheckBox spnselect;
    private javax.swing.JTable stocktable;
    private javax.swing.JLabel subtotaltxt;
    private javax.swing.JLabel supplbl;
    private javax.swing.JComboBox suppliercombo;
    // End of variables declaration//GEN-END:variables



  
  private void selectrowgrn()
  {
    if (this.stocktable.getSelectedRow() == -1)
    {
      JOptionPane.showMessageDialog(this, "Select Row First");
    }
    else
    {
      int row = this.stocktable.getSelectedRow();
      
      this.cpidtxt.setText(this.dtm1.getValueAt(row, 1) + "");
      this.cpnametxt.setText(this.dtm1.getValueAt(row, 2) + "");
      this.cbuytxt.setText(this.dtm1.getValueAt(row, 3) + "");
      this.minpricetxt.setText(this.dtm1.getValueAt(row, 4) + "");
      this.maxpricetxt.setText(this.dtm1.getValueAt(row, 5) + "");
      this.lowstocktxt.setText(this.dtm1.getValueAt(row, 8) + "");
      this.cqtytxt.requestFocus();
    }
  }
  
  private void searchproduct(int i)
  {
    try
    {
      if (i == 1)
      {
        clear(1);
        this.elbl.setVisible(false);
        ResultSet rs = this.d.srh("select name , sname from product where id = '" + this.pidtxt.getText() + "' ");
        while (rs.next())
        {
          this.pnametxt.setText(rs.getString("name"));
          this.pnametxt1.setText(rs.getString("sname"));
          this.elbl.setVisible(true);
        }
      }
      else if (i == 2)
      {
        clear(2);
        ResultSet rs = this.d.srh("select name from product where id = '" + this.cpidtxt.getText() + "' ");
        while (rs.next()) {
          this.cpnametxt.setText(rs.getString("name"));
        }
        stockload();
      }
      else if (i == 3)
      {
        try
        {
          this.numberlist1.setVisible(true);
          this.numberlist2.setVisible(true);
          this.jlm1.removeAllElements();
          ResultSet rs = this.d.srh("select *  from product where id LIKE '%" + this.cpidtxt.getText() + "%' OR name LIKE '%" + this.cpidtxt.getText() + "%' ");
          for (int j = 0; rs.next(); j++) {
            this.jlm1.add(j, rs.getString("id") + " - " + rs.getString("name"));
          }
          this.numberlist1.setModel(this.jlm1);
          if (this.numberlist1.getModel().getSize() == 0)
          {
            this.numberlist1.setVisible(false);
            clear(2);
          }
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  
  private void clear(int i) {
    if (i == 1) {
      
      this.pnametxt.setText("");
      this.pnametxt1.setText("");
    }
    else if (i == 2) {
      
      this.cpnametxt.setText("");
      this.cbuytxt.setText("");
      this.lowstocktxt.setText("");
      this.cqtytxt.setText("");
      this.maxpricetxt.setText("");
      this.minpricetxt.setText("");
      this.subtotaltxt.setText("");
      this.defpricetxt.setText("");
      this.jCheckBox1.setSelected(false);
      setexpirecombo();
    }
    else if (i == 3) {
      
      this.cpidtxt.setText("");
      this.cpnametxt.setText("");
      this.cbuytxt.setText("");
      this.lowstocktxt.setText("");
      this.minpricetxt.setText("");
      this.cqtytxt.setText("");
      this.maxpricetxt.setText("");
      this.defpricetxt.setText("");
      this.subtotaltxt.setText("");
      this.freecheck.setSelected(false);
      this.cscheck.setSelected(false);
      this.jCheckBox1.setSelected(false);
      setexpirecombo();
    } 
  }
  
  private void catagaryload()
  {
    try
    {
      this.catagarycombo.removeAllItems();
      ResultSet rs = this.d.srh("select * from brand");
      while (rs.next()) {
        this.catagarycombo.addItem(rs.getString("name"));
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  private void supplierload()
  {
    try
    {
      this.suppliercombo.removeAllItems();
      ResultSet rs = this.d.srh("select * from supplier ");
      while (rs.next()) {
        this.suppliercombo.addItem(rs.getString("name"));
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  private void loadnextpid()
  {
    this.rb1.setSelected(true);
    this.elbl.setVisible(false);
    this.pidtxt.setText("");
    try
    {
      String maxbar = "";
      if (this.catagarycombo.getItemCount() != 0)
      {
        String brand = this.catagarycombo.getSelectedItem().toString();
        ResultSet rs = this.d.srh("select * from brand where name = '" + brand + "' ");
        while (rs.next())
        {
          maxbar = rs.getString("keycode") + (rs.getInt("lastid") + 1);
          this.pidtxt.setText(maxbar);
        }
        selectexist(maxbar);
        this.pnametxt.requestFocus();
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  private void saveproduct()
  {
    try
    {
      if (!this.pidtxt.getText().isEmpty()) {
        if (this.pnametxt.getText().isEmpty())
        {
          JOptionPane.showMessageDialog(this, "Please insert product english name");
          this.pnametxt.requestFocus();
        }/* DISABLE SINHALA NAME */
        else if (this.pnametxt1.getText().isEmpty())
        {
          JOptionPane.showMessageDialog(this, "Please insert product sinhala name");
          this.pnametxt.requestFocus();
        }
        else if (this.elbl.isVisible())
        {
          //JOptionPane.showMessageDialog(this, "Product Number Already Exist");
          updateproduct();
        }
        else
        {
          int i = this.d.aud("insert into product (id, name, brand_name , sname ) values('" + this.pidtxt.getText() + "' , '" + this.pnametxt.getText() + "' , '" + this.catagarycombo.getSelectedItem().toString() + "' , '" + this.pnametxt1.getText() + "' ) ");
          if (i == 1)
          {
            JOptionPane.showMessageDialog(this, "<html> <h4><strong> " + this.pidtxt.getText() + " - " + this.pnametxt.getText() + " <strong></h4><br> Product Saved. </html>");
            
            this.cpidtxt.setText(this.pidtxt.getText());
            this.cpnametxt.setText(this.pnametxt.getText());
            this.pnametxt.setText("");
            this.pnametxt1.setText("");
            loadnextpid();
            productload();
            this.cbuytxt.requestFocus();
          }
          else if (i == 0)
          {
            JOptionPane.showMessageDialog(this, "Something Went Wrong. ");
          }
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  private void productload()
  {
    this.dtm.setRowCount(0);
    try
    {
      ResultSet rs = this.d.srh("select * from product order by id desc");
      while (rs.next())
      {
        Vector v = new Vector();
        v.add(rs.getString("id"));
        v.add(rs.getString("name"));
        this.dtm.addRow(v);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  private void stockload()
  {
    this.dtm1.setRowCount(0);
    if (this.spnselect.isSelected())
    {
      if (this.cpnametxt.getText().isEmpty()) {
        try
        {
          ResultSet rs = this.d.srh("select * from stock inner join product on stock.product_id = product.id order by stock.id desc");
          while (rs.next())
          {
            Vector v = new Vector();
            v.add(rs.getString("stock.id"));
            v.add(rs.getString("stock.product_id"));
            v.add(rs.getString("product.name"));
            v.add(rs.getString("stock.buyprice"));
            v.add(rs.getString("stock.minprice"));
            v.add(rs.getString("stock.maxprice"));
            v.add(rs.getString("stock.buyqty"));
            v.add(rs.getString("stock.avqty"));
            v.add(rs.getString("stock.lowstock"));
            this.dtm1.addRow(v);
          }
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
      } else {
        try
        {
          ResultSet rs = this.d.srh("select * from stock inner join product on stock.product_id = product.id where product.id = '" + this.cpidtxt.getText() + "' order by stock.id desc");
          while (rs.next())
          {
            Vector v = new Vector();
            v.add(rs.getString("stock.id"));
            v.add(rs.getString("stock.product_id"));
            v.add(rs.getString("product.name"));
            v.add(rs.getString("stock.buyprice"));
            v.add(rs.getString("stock.minprice"));
            v.add(rs.getString("stock.maxprice"));
            v.add(rs.getString("stock.defprice"));
            v.add(rs.getString("stock.buyqty"));
            v.add(rs.getString("stock.avqty"));
            v.add(rs.getString("stock.lowstock"));
            this.dtm1.addRow(v);
          }
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
      }
    }
    else {
      try
      {
        ResultSet rs = this.d.srh("select * from stock inner join product on stock.product_id = product.id order by stock.id desc");
        while (rs.next())
        {
          Vector v = new Vector();
          v.add(rs.getString("stock.id"));
          v.add(rs.getString("stock.product_id"));
          v.add(rs.getString("product.name"));
          v.add(rs.getString("stock.buyprice"));
          v.add(rs.getString("stock.minprice"));
          v.add(rs.getString("stock.maxprice"));
          v.add(rs.getString("stock.defprice"));
          v.add(rs.getString("stock.buyqty"));
          v.add(rs.getString("stock.avqty"));
          v.add(rs.getString("stock.lowstock"));
          this.dtm1.addRow(v);
        }
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
    }
  }
  
  private void save(int ri)
  {
    if (this.cpnametxt.getText().isEmpty())
    {
      JOptionPane.showMessageDialog(this, "Insert a valid product");
      this.pidtxt.requestFocus();
    }
    else if (this.cbuytxt.getText().isEmpty())
    {
      this.cbuytxt.requestFocus();
    }
    else if (this.cqtytxt.getText().isEmpty())
    {
      this.cqtytxt.requestFocus();
    }
    else if (this.minpricetxt.getText().isEmpty())
    {
      this.minpricetxt.requestFocus();
    }
    else if (this.maxpricetxt.getText().isEmpty())
    {
      this.maxpricetxt.requestFocus();
    }else if (this.defpricetxt.getText().isEmpty()) {
      
      this.defpricetxt.requestFocus();
    }
    else if (this.lowstocktxt.getText().isEmpty())
    {
      this.lowstocktxt.requestFocus();
    }
    else
    {
      saves(ri);
    }
  }
  
    private void saves(int ri) {
    System.out.println(ri);
    String pid = this.cpidtxt.getText();
    Double buy = Double.valueOf(Double.parseDouble(this.cbuytxt.getText()));
    Double low = Double.valueOf(Double.parseDouble(this.lowstocktxt.getText()));
    Double min = Double.valueOf(Double.parseDouble(this.minpricetxt.getText()));
    Double max = Double.valueOf(Double.parseDouble(this.maxpricetxt.getText()));
    Double qty = Double.valueOf(Double.parseDouble(this.cqtytxt.getText()));
    Double def = Double.valueOf(Double.parseDouble(this.defpricetxt.getText()));
    Double cost = Double.valueOf(buy.doubleValue() * qty.doubleValue());
    if (buy.doubleValue() <= 0.0D && !this.freecheck.isSelected()) {
      
      JOptionPane.showMessageDialog(this, "Invalid Buy Price");
    }
    else if (buy.doubleValue() > min.doubleValue()) {
      
      JOptionPane.showMessageDialog(this, "Invalid Buy Price or Minimum Price");
      this.cbuytxt.requestFocus();
    }
    else if (min.doubleValue() > max.doubleValue()) {
      
      JOptionPane.showMessageDialog(this, "Invalid Minimum or Maximum Price");
      this.lowstocktxt.requestFocus();
    }
    else if (def.doubleValue() > max.doubleValue()) {
      
      JOptionPane.showMessageDialog(this, "Invalid Default Price");
      this.lowstocktxt.requestFocus();
    }
    else if (def.doubleValue() < min.doubleValue()) {
      
      JOptionPane.showMessageDialog(this, "Invalid Default Price");
      this.lowstocktxt.requestFocus();
    }
    else if (qty.doubleValue() <= 0.0D) {
      
      JOptionPane.showMessageDialog(this, "Invalid Qty");
      this.cqtytxt.requestFocus();
    }
    else if (low.doubleValue() <= 0.0D) {
      
      JOptionPane.showMessageDialog(this, "Invalid Low Stock Value");
      this.cqtytxt.requestFocus();
    }
    else {
      
      int supplier = Integer.parseInt(this.supplbl.getText());
      if (supplier == 0) {
        
        int res = JOptionPane.showConfirmDialog(this, "Are You sure to continue with CashBuyer", "", 0);
        if (res == 0) {
          
          try {
            if (this.cscheck.isSelected()) {
              
              double q = 0.0D;
              double qcost = 0.0D;
              int csa = 0;
              ResultSet rs = this.d.srh("select id , buyprice ,avqty from stock where product_id = '" + this.cpidtxt.getText() + "' and avqty>0 ");
              while (rs.next()) {
                
                csa = 1;
                q += rs.getDouble("avqty");
                qcost = rs.getDouble("buyprice");
              } 
              if (qcost == buy.doubleValue()) {
                
                double avqty = qty.doubleValue() + q;
                
                int stockid = this.d.nextnum("select max(id) from stock", "max(id)");
                int i2 = this.d.aud("update stock set avqty = 0 where product_id = '" + this.cpidtxt.getText() + "' ");
                
                int i = 0;
                if (this.jCheckBox1.isSelected()) {
                  i = this.d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active , exdate ) Values( '" + stockid + "' ,'" + this.cpidtxt
                      .getText() + "' ,'" + this.supplbl.getText() + "' ,'" + buy + "' ,'" + qty + "' , buyprice*buyqty  ,'" + min + "' ,'" + max + "' ,'" + def + "'  , '" + avqty + "', '0' , '" + low + "'  , '" + this.user + "'  , NOW()  ,'1' , '" + this.datecombo.getText() + "' ) ");
                } else {
                  i = this.d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active) Values( '" + stockid + "' ,'" + this.cpidtxt
                      .getText() + "' ,'" + this.supplbl.getText() + "' ,'" + buy + "' ,'" + qty + "' , buyprice*buyqty  ,'" + min + "' ,'" + max + "' ,'" + def + "'  , '" + avqty + "', '0' , '" + low + "'  , '" + this.user + "'  , NOW()  ,'1' ) ");
                } 
                int i1 = this.d.aud("update supplier set balance = balance + '" + cost + "' where id = '" + supplier + "' ");
                if (i == 1)
                {
                  JOptionPane.showMessageDialog(this, "Saved Succesfuly with Combined Stock.");
                  Toolkit.getDefaultToolkit().beep();
                  clear(3);
                  stockload();
                  if (ri == 1) {
                    (new printbarcode(null, true, pid)).setVisible(true);
                  }
                  this.cpidtxt.requestFocus();
                }
                else
                {
                  JOptionPane.showMessageDialog(this, "Something Went Wrong.");
                  Toolkit.getDefaultToolkit().beep();
                }
              
              } else {
                
                JOptionPane.showMessageDialog(this, "<html>Last Stock Buy Price is not equal for today buyprice.<br>Please Uncheck the cobine stock and try again</html>");
              }
            
            } else {
              
              int stockid = this.d.nextnum("select max(id) from stock", "max(id)");
              int i = 0;
              if (this.jCheckBox1.isSelected()) {
                i = this.d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active , exdate ) Values( '" + stockid + "' ,'" + this.cpidtxt
                    .getText() + "' ,'" + this.supplbl.getText() + "' ,'" + buy + "' ,'" + qty + "' , buyprice*buyqty  ,'" + min + "' ,'" + max + "' ,'" + def + "'  , buyqty , '0' , '" + low + "'  , '" + this.user + "'  , NOW()  ,'1' , '" + this.datecombo.getText() + "' ) ");
              } else {
                i = this.d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active) Values( '" + stockid + "' ,'" + this.cpidtxt
                    .getText() + "' ,'" + this.supplbl.getText() + "' ,'" + buy + "' ,'" + qty + "' , buyprice*buyqty  ,'" + min + "' ,'" + max + "' ,'" + def + "'  , buyqty , '0' , '" + low + "'  , '" + this.user + "'  , NOW()  ,'1' ) ");
              } 
              int i1 = this.d.aud("update supplier set balance = balance + '" + cost + "' where id = '" + supplier + "' ");
              if (i == 1)
              {
                JOptionPane.showMessageDialog(this, "Saved Succesfuly.");
                clear(3);
                stockload();
                if (ri == 1) {
                  (new printbarcode(null, true, pid)).setVisible(true);
                }
                this.cpidtxt.requestFocus();
              }
              else
              {
                JOptionPane.showMessageDialog(this, "Something Went Wrong.");
              }
            
            } 
          } catch (Exception e) {
            
            e.printStackTrace();
          } 
        } else {
          this.suppliercombo.requestFocus();
        } 
      } else {

        
        try {
          
          if (this.cscheck.isSelected()) {
            
            double q = 0.0D;
            double qcost = 0.0D;
            int csa = 0;
            ResultSet rs = this.d.srh("select id , buyprice , avqty from stock where product_id = '" + this.cpidtxt.getText() + "' and avqty>0 ");
            while (rs.next()) {
              
              csa = 1;
              q += rs.getDouble("avqty");
              qcost = rs.getDouble("buyprice");
            } 
            if (qcost == buy.doubleValue()) {
              
              double avqty = qty.doubleValue() + q;
              
              int i2 = this.d.aud("update stock set avqty = 0 where product_id = '" + this.cpidtxt.getText() + "' ");
              
              int stockid = this.d.nextnum("select max(id) from stock", "max(id)");
              
              int i = 0;
              if (this.jCheckBox1.isSelected()) {
                i = this.d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active , exdate) Values( '" + stockid + "' ,'" + this.cpidtxt
                    .getText() + "' ,'" + this.supplbl.getText() + "' ,'" + buy + "' ,'" + qty + "' , buyprice*buyqty  ,'" + min + "' ,'" + max + "' ,'" + def + "'  , '" + avqty + "' , '0' , '" + low + "'  , '" + this.user + "'  , NOW()  ,'1' , '" + this.datecombo.getText() + "'  ) ");
              } else {
                i = this.d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active) Values( '" + stockid + "' ,'" + this.cpidtxt
                    .getText() + "' ,'" + this.supplbl.getText() + "' ,'" + buy + "' ,'" + qty + "' , buyprice*buyqty  ,'" + min + "' ,'" + max + "' ,'" + def + "'  , '" + avqty + "' , '0' , '" + low + "'  , '" + this.user + "'  , NOW()  ,'1' ) ");
              } 
              int i1 = this.d.aud("update supplier set balance = balance + '" + cost + "' where id = '" + supplier + "' ");
              if (i == 1)
              {
                JOptionPane.showMessageDialog(this, "Saved Succesfuly with Combined Stock.");
                clear(3);
                stockload();
                if (ri == 1) {
                  (new printbarcode(null, true, pid)).setVisible(true);
                }
                this.cpidtxt.requestFocus();
              }
              else
              {
                JOptionPane.showMessageDialog(this, "Something Went Wrong.");
              }
            
            } else {
              
              JOptionPane.showMessageDialog(this, "<html>Last Stock Buy Price is not equal for today buyprice.<br>Please Uncheck the cobine stock and try again</html>");
            }
          
          } else {
            
            int stockid = this.d.nextnum("select max(id) from stock", "max(id)");
            
            int i = 0;
            if (this.jCheckBox1.isSelected()) {
              i = this.d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active , exdate) Values( '" + stockid + "' ,'" + this.cpidtxt
                  .getText() + "' ,'" + this.supplbl.getText() + "' ,'" + buy + "' ,'" + qty + "' , buyprice*buyqty  ,'" + min + "' ,'" + max + "' ,'" + def + "'  , buyqty , '0' , '" + low + "'  , '" + this.user + "'  , NOW()  ,'1' , '" + this.datecombo.getText() + "' ) ");
            } else {
              i = this.d.aud("Insert into stock(id, product_id, supplier_id, buyprice, buyqty, buycost, minprice, maxprice, defprice, avqty, rqty, lowstock, user_usename, date , active) Values( '" + stockid + "' ,'" + this.cpidtxt
                  .getText() + "' ,'" + this.supplbl.getText() + "' ,'" + buy + "' ,'" + qty + "' , buyprice*buyqty  ,'" + min + "' ,'" + max + "' ,'" + def + "'  , buyqty , '0' , '" + low + "'  , '" + this.user + "'  , NOW()  ,'1' ) ");
            } 
            int i1 = this.d.aud("update supplier set balance = balance + '" + cost + "' where id = '" + supplier + "' ");
            if (i == 1)
            {
              JOptionPane.showMessageDialog(this, "Saved Succesfuly.");
              Toolkit.getDefaultToolkit().beep();
              clear(3);
              stockload();
              if (ri == 1) {
                (new printbarcode(null, true, pid)).setVisible(true);
              }
              this.cpidtxt.requestFocus();
            }
            else
            {
              JOptionPane.showMessageDialog(this, "Something Went Wrong.");
              Toolkit.getDefaultToolkit().beep();
            }
          
          } 
        } catch (Exception e) {
          
          e.printStackTrace();
        } 
      } 
    } 
  }  
  
  private void setsupp()
  {
    try
    {
      ResultSet rs = this.d.srh("select * from supplier where name = '" + this.suppliercombo.getSelectedItem().toString() + "' ");
      while (rs.next()) {
        this.supplbl.setText(rs.getString("id"));
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  private void subtotalgen()
  {
    if (this.cbuytxt.getText().isEmpty())
    {
      this.subtotaltxt.setText("Rs. 0.00");
    }
    else if (this.cqtytxt.getText().isEmpty())
    {
      this.subtotaltxt.setText("Rs. 0.00");
    }
    else
    {
      double buy = Double.parseDouble(this.cbuytxt.getText());
      double qty = Double.parseDouble(this.cqtytxt.getText());
      this.subtotaltxt.setText("Rs. " + buy * qty);
    }
  }
  
  private void selectbarcode()
  {
    if (this.rb1.isSelected())
    {
      this.pidtxt.setText("");
      this.pidtxt.setEditable(false);
      loadnextpid();
    }
    else if (this.rb2.isSelected())
    {
      this.pidtxt.setEditable(true);
      this.pidtxt.setText("");
      this.pidtxt.requestFocus();
    }
  }
  
  private void selectexist(String id)
  {
    try
    {
      int i = 0;
      
      ResultSet rs = this.d.srh("select * from product where id = '" + id + "' ");
      while (rs.next()) {
        i = 1;
      }
      if (i == 1)
      {
        this.d.aud("update brand set lastid = lastid + 1 where name = '" + this.catagarycombo.getSelectedItem().toString() + "' ");
        loadnextpid();
      }
      searchproduct(1);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  public void selectsupplier(String sid, String name)
  {
    supplierload();
    this.suppliercombo.setSelectedItem(name);
    this.supplbl.setText(sid);
  }
  
  private void setexpirecombo()
  {
    if (this.jCheckBox1.isSelected()) {
      this.datecombo.setEnabled(true);
    } else {
      this.datecombo.setEnabled(false);
    }
  }
  
  private void genmin()
  {
    this.minpricetxt.setText(this.cbuytxt.getText());
  }

  private void updateproduct(){
  
      try {
          
          int i = this.d.aud("update product set name = '" + pnametxt.getText() + "' , brand_name = '" + catagarycombo.getSelectedItem() + "' , sname = '" + pnametxt1.getText() + "' where id =  '" + pidtxt.getText() + "'  ");
          if (i == 1){
            JOptionPane.showMessageDialog(this, "<html> <h4><strong> " + this.pidtxt.getText() + " - " + this.pnametxt.getText() + " <strong></h4><br> Product Saved. </html>");
            this.cpidtxt.setText(this.pidtxt.getText());
            this.cpnametxt.setText(this.pnametxt.getText());
            this.pnametxt.setText("");
            this.pnametxt1.setText("");
            loadnextpid();
            productload();
            this.cbuytxt.requestFocus();
          }
          else if (i == 0){
            JOptionPane.showMessageDialog(this, "Something Went Wrong. ");
          }
          
      } catch (Exception e) {
          e.printStackTrace();
      }

  }
}